apply plugin: 'com.android.application'
apply from: '../compat/preprocess.gradle'
apply from: '../gradle/constants.gradle'

android {
    compileSdkVersion PROJECT_COMPILE_SDK
    buildToolsVersion PROJECT_BUILD_TOOLS
    defaultConfig {
        applicationId "es.rafaco.inappdevtools.demo"
        minSdkVersion PROJECT_MIN_SDK
        targetSdkVersion PROJECT_TARGET_SDK
        versionCode DEMO_VERSION_CODE
        versionName DEMO_VERSION

        //TODO: remove
        multiDexEnabled false
    }

    compileOptions {
        targetCompatibility PROJECT_TARGET_COMPATIBILITY
        sourceCompatibility PROJECT_SOURCE_COMPATIBILITY
    }

    flavorDimensions "compatibility"
    productFlavors {
        support {
            dimension "compatibility"
            processor.symbols "SUPPORT"
            matchingFallbacks = ['debug', 'release']
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
            getIsDefault().set(true)
        }
        androidx {
            dimension "compatibility"
            processor.symbols "ANDROIDX"
            matchingFallbacks = ['debug', 'release']
            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    /*
     * IADT dependencies are injected by our plugin as usual but it will detect the local
     * development environment and it will use project paths.
     * With default configuration it will add:
     *      debugApi project(':library')
     *      releaseApi project(':noop')
     */

    debugApi project(':library')
    releaseApi project(':noop')

    // Compat library from project path
    api project(':compat')

    //Retrofit
    api "com.squareup.retrofit2:retrofit:$RETROFIT_VERSION"
    api "com.squareup.retrofit2:converter-gson:$RETROFIT_VERSION"

    //Test
    testImplementation "junit:junit:$JUNIT_VERSION"
    androidTestAndroidxImplementation "androidx.test:runner:$ANDROIDX_TEST_RUNNER"
    androidTestAndroidxImplementation "androidx.test.espresso:espresso-core:$ANDROIDX_TEST_ESPRESSO"
    androidTestSupportImplementation "com.android.support.test:runner:$SUPPORT_TEST_RUNNER"
    androidTestSupportImplementation "com.android.support.test.espresso:espresso-core:$SUPPORT_TEST_ESPRESSO"
}

sonarqube {
    androidVariant 'supportDebug'
}

task startApp(type: Exec) {
    def NAMESPACE_AND_ACTIVITY = 'es.rafaco.inappdevtools.demo/.view.MainActivity'

    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        commandLine 'cmd', '/c', 'adb', 'shell', 'am', 'start', '-n', NAMESPACE_AND_ACTIVITY
    } else {
        commandLine 'adb', 'shell', 'am', 'start', '-n', NAMESPACE_AND_ACTIVITY
    }
}
