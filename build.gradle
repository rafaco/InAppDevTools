buildscript {

    repositories {
        google()
        jcenter()
    }

    apply from: './gradle/constants.gradle'

    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.1'
        //classpath 'com.android.tools.build:gradle:3.6.1' //Latest tested

        /*
         *  IADT Setup: Old way using legacy plugin application.
         */
        //classpath "es.rafaco.inappdevtools:inappdevtools-plugin:${PROJECT_VERSION}"

        // Internal plugins for publications
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'

        // Compat Preprocessor: custom artifact from my fork. PR sent to dannyhe.
        //classpath 'wang.dannyhe.tools:plugin:0.0.7'
        classpath files('./compat/libs/wang.dannyhe.tools.preprocessor-0.0.7a.jar')
    }
}

plugins {
    /*
     *  IADT Setup: Modern way using plugins DSL.
     *  Dynamic versioning if Gradle version > 5.6
     */
    id "es.rafaco.inappdevtools" version "1.0.0"

    // Reports from local development environment
    id "org.sonarqube" version "2.8"
}

/*
 *  Iadt CONFIGURATION
*/
inappdevtools {
    //// Build flags (affect plugin behaviour)
    enabled = true
    debug = true
    //sourceInclusion = false
    //sourceInspection = false
    //viewInspection = false
    //storageInspection = false
    //networkInterceptor = false
    //enabledOnRelease = true

    //// Customization flags (runtime)
    notes = "This is a SAMPLE NOTE about this compilation:\n" +
            " - Developers can add any text here using Gradle configuration\n" +
            " - Useful to describe changes or to provide instructions"

    teamName = "DemoTeam"
    teamDesc = "Team description or any text you want to show on top of Team screen. Change it with 'teamDesc' configuration."
    teamEmail = 'inappdevtools@gmail.com'
    teamLinks = [ website   : "http://inappdevtools.org",
                  repo      : "https://github.com/rafaco/InAppDevTools",
                  issues    : "https://github.com/rafaco/InAppDevTools/issues",
                  readme    : "https://github.com/rafaco/InAppDevTools/blob/master/README.md" ]

    // Feature switches (runtime)
    //overlayEnabled = false
    //invocationByShake = false
    //invocationByIcon = true
    //callDefaultCrashHandler = true
    //injectEventsOnLogcat = false
}

allprojects {
    repositories {
        mavenLocal()
        //maven { url "https://jitpack.io"}
        google()
        jcenter()
    }
}

// Clean all modules
task clean(type: Delete) {
    delete rootProject.buildDir
    delete './captures'
    delete './plugin/build'
}
subprojects {
    rootProject.clean.dependsOn tasks.matching { it.name == 'clean' }
}


//TODO: Re-enable JavaDoc generation after common-logging removed.
subprojects {
    tasks.withType(Javadoc).all { enabled = false }
}



//Doze Utils
apply from: './gradle/doze_utils.gradle'

//SonarCloud Report (running task sonarqube)
sonarqube {
    androidVariant 'supportDebug'
    properties {
        property "sonar.projectVersion", PROJECT_VERSION
        property "sonar.login", System.getenv('SONAR_TOKEN')
    }
}
task prepareLocalSonar(){
    doLast{
        def isCircleCi = System.getenv('CI')
        if (isCircleCi){
            println "Build environment is CI, skipped."
            return
        }
        println "Build environment is LOCAL, preparing..."
        System.setProperty("sonar.branch.name", "local-develop")
        System.setProperty("sonar.branch.target", "develop") //TODO: get from git command
        Properties localProperties = new Properties()
        def targetPropertyName = 'sonar.nodejs.executable'
        def localPropertiesFile = project.rootProject.file('local.properties')
        if (localPropertiesFile.exists()) {
            localProperties.load(localPropertiesFile.newDataInputStream())
            def localValue = localProperties.getProperty(targetPropertyName, null)
            if (localValue != null){
                System.setProperty(targetPropertyName, localValue)
            }
        }
    }
}
project.tasks["sonarqube"].dependsOn "prepareLocalSonar"

//Gradle Scanner Report (enable with param --scan)
if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

//Show Gradle Lint compile warnings
/*allprojects {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}*/
