apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

ext {
    //groupId = 'org.inappdevtools'         // GroupId - WIP, relocated to importer module
    //artifactId = 'inappdevtools'          // ArtifactId: Renamed into flavor
    //libraryVersion = 'X.X.XX'             // Version: Relocated to root script

    //bintrayRepo = "InAppDevTools"
    //bintrayPkg = "inappdevtools"          //WIP, relocated to importer module

    //projectName = 'InAppDevTools'
    //projectDesc = 'Android library with a collection of tools for debugging, inspecting and reporting from within your own application'

    siteUrl = PROJECT_URL
    issuesUrl = PROJECT_URL + '/issues'
    githubRepo = AUTHOR_ID + '/' + PROJECT_NAME

    developerId = AUTHOR_ID
    developerName = AUTHOR_NAME
    developerEmail = AUTHOR_EMAIL

    licenseName = PROJECT_LICENSE_NAME
    licenseUrl = PROJECT_LICENSE_URL
    allLicenses = PROJECT_ALL_LICENSES
}

group = groupId
version = PROJECT_VERSION

def publicationNames = []
def pomConfig = {
    licenses {
        license {
            name licenseName
            url licenseUrl
        }
    }
    developers {
        developer {
            id developerId
            name developerName
            email developerEmail
        }
    }
    scm {
        connection vcsUrl
        //developerConnection vcsUrl
        url siteUrl
    }
}

publishing.publications {
    android.libraryVariants.all { variant ->
        def flavored = !variant.flavorName.isEmpty()

        // Prevents publishing debug library
        if (variant.buildType.name == "debug") {
            //println("- Skipped publication for ${variant.flavorName} ${variant.buildType.name}")
            return
        }

        //Prevent other variants when using DynamicPkgName
        if (flavored && bintrayDynamicPkg == true && variant.flavorName != bintrayPkg){
            //def isAndroidX = project.rootProject.properties['android.useAndroidX'] == 'true'
            //println("- Skipped publication for ${variant.flavorName} ${variant.buildType.name}")
            return
        }

        //Translates "_" in flavor names to "-" for artifactIds, because "-" in flavor name is an
        def variantArtifactId = flavored ? variant.flavorName.replace('_', '-') : project.name

        // Use different javadoc destinationDir per flavor, needed for multi-build
        def javaDocDestDir = file("${buildDir}/docs/javadoc ${flavored ? variantArtifactId : ""}")

        //Include all sources
        def sourceDirs = variant.sourceSets.collect {
            it.javaDirectories // Also includes kotlin sources if any.
        }

        def javadoc = task("${variant.name}Javadoc", type: Javadoc) {
            description "Generates Javadoc for ${variant.name}."
            source = sourceDirs //variant.javaCompileProvider.get().source //Was deprecated: variant.javaCompile.source
            destinationDir = javaDocDestDir
            classpath += files(android.getBootClasspath().join(File.pathSeparator))
            //TODO:
            //configurations.compile.setCanBeResolved(true)
            classpath += files(configurations.compile)
            options.links("http://docs.oracle.com/javase/7/docs/api/")
            options.links("http://d.android.com/reference/")
            exclude '**/BuildConfig.java'
            exclude '**/R.java'
            failOnError false
        }
        def javadocJar = task("${variant.name}JavadocJar", type: Jar, dependsOn: javadoc) {
            description "Puts Javadoc for ${variant.name} in a jar."
            classifier = 'javadoc'
            from javadoc.destinationDir
        }
        def sourcesJar = task("${variant.name}SourcesJar", type: Jar) {
            description "Puts sources for ${variant.name} in a jar."
            from sourceDirs
            classifier = 'sources'
        }

        def publicationName = "${variant.name.capitalize()}"
        //def publicationName = "Iadt_${variant.name.capitalize()}"
        publicationNames.add(publicationName)

        "$publicationName"(MavenPublication) {
            group groupId
            artifactId variantArtifactId
            version PROJECT_VERSION

            artifact variant.packageLibraryProvider.get()
            artifact sourcesJar
            artifact javadocJar

            pom {
                packaging 'aar'
                withXml {
                    println "Building pom.xml for ${publicationName}"
                    def root = asNode()
                    root.appendNode("name", projectName)
                    root.appendNode("url", siteUrl)
                    root.appendNode("description", projectDesc)
                    root.children().last() + pomConfig

                    def dependenciesNode = root["dependencies"][0] ?: root.appendNode("dependencies")
                    def addDependency = {
                        if (it.group == null) return // Avoid empty dependency nodes
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)

                        //TODO: Remapping COMPAT, project dependency
                        def artifact = it.name
                        if (it.group == 'org.inappdevtools.compat'){
                            def isAndroidX = project.rootProject.properties['android.useAndroidX'] == 'true'
                            if (isAndroidX)
                                artifact = 'androidx'
                            else
                                artifact = 'support'
                        }

                        dependencyNode.appendNode('artifactId', artifact)
                        dependencyNode.appendNode('version', it.version)
                        if (it.hasProperty('optional') && it.optional) {
                            dependencyNode.appendNode('optional', 'true')
                        }
                        println(" - Added ${it.group}:${artifact}:${it.version}")

                        //TODO: hardcoded exclusion of OkHttp in Pandora
                        if (it.group == 'com.github.whataa') {
                            def exclusions = dependencyNode.appendNode('exclusions')
                            def exclusion = exclusions.appendNode('exclusion')
                            exclusion.appendNode('groupId', 'com.squareup.okhttp3')
                            exclusion.appendNode('artifactId', 'okhttp')
                            println("   - Excluded 'com.squareup.okhttp3:okhttp3'")
                        }
                    }

                    // Add general dependencies
                    println("Processing compile dependencies...")
                    configurations.compile.allDependencies.each addDependency
                    println("Processing implementation dependencies...")
                    configurations.implementation.allDependencies.each addDependency

                    //TODO: Add builtType dependencies
                    //configurations["${variant.buildType}Compile"].allDependencies.each addDependency
                    //configurations["${variant.buildType}Implementation"].allDependencies.each addDependency

                    // Add flavor dependencies
                    if (flavored) {
                        println("Processing flavorCompile dependencies...")
                        configurations["${variant.flavorName}Compile"].allDependencies.each addDependency
                        println("Processing flavorImplementation dependencies...")
                        configurations["${variant.flavorName}Implementation"].allDependencies.each addDependency
                    }
                }
            }
        }
    }
}

afterEvaluate {
    bintray {
        dryRun = false      //[Default: false] Skip deployment
        publish = true      //[Default: false] Skip publication after deployment
        override = false    //[Default: false] Override artifacts already published

        publications = publicationNames

        pkg {
            repo = bintrayRepo
            name = bintrayPkg  //Was project.name
            version {
                name = PROJECT_VERSION
                desc = projectDesc //TODO: versionDesc
                gpg {
                    sign = true
                    passphrase = System.getenv('BINTRAY_GPG')
                }
            }

            desc = projectDesc
            websiteUrl = siteUrl
            vcsUrl = vcsUrl
            issueTrackerUrl = issuesUrl
            licenses = allLicenses
            labels = PROJECT_TAGS
            publicDownloadNumbers = true
            githubRepo = githubRepo
            //githubReleaseNotesFile = 'README.md'
        }

        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_KEY')
    }
}

task checkBintrayUpload {
    doLast {
        println "Bintray publication done! ${bintray.pkg.repo} -> ${bintray.pkg.name} -> ${bintray.pkg.version.name} from ${bintray.pkg.publications}"
    }
}
bintrayUpload.finalizedBy checkBintrayUpload
